# -*- coding: utf-8 -*-
"""Build a Context-Aware LLM Agent Using LangChain

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GfJ8yvyoKbDsESUh3qXKwzcQAZuUkl-y

# üîç Assignment: Build a Context-Aware LLM Agent Using LangChain

##  Objective
Design and implement your **own LLM-powered agent** using the LangChain ecosystem. This agent should:
- Use at least **one tool**
- Incorporate **function-calling**
- Integrate **LangSmith** for observability
- Implement a **fallback mechanism**
- Bonus: Use the **Agentic** library to define a clear multi-step workflow

# Use Case: Travel Planner Agent
## ‚úàÔ∏è Agent Goal:
- Plan a trip by finding flight information, estimating trip cost, and recommending tourist attractions. If the tool/API fails, it falls back to a simple language-based response.
"""

!pip install -U langchain langchain-community langchain-openai chromadb pydantic python-dotenv
!pip install langchain-groq

"""## Imports"""

from langchain.chat_models import ChatOpenAI
from langchain.agents import initialize_agent, Tool, AgentType
from langchain.tools import tool
from langchain.schema import SystemMessage
from langchain.callbacks import tracing_v2_enabled
from pydantic import BaseModel, Field
from dotenv import load_dotenv
import os
import random

"""##  Step 2: Set Up Keys
 You‚Äôll need:
- An OpenAI API key (for LLM calls)/ Groq API
- A LangSmith API key (for logging and observability)
"""

import os

# Set your Groq key
os.environ["Groq_API_KEY"] = "key here"

# Set your LangSmith key
os.environ["LANGSMITH_API_KEY"] = "key here"

# Optional: Enable LangSmith tracing
os.environ["LANGCHAIN_TRACING_V2"] = "true"
os.environ["LANGCHAIN_PROJECT"] = "default"

print("‚úÖ Groq Key Set:", os.getenv ("Groq_API_KEY")[:10])
print("‚úÖ LangSmith Key Set:", os.getenv("LANGSMITH_API_KEY")[:10])

"""##  Step 3: Define Custom Tools
 Build at least one tool (e.g., API, calculator, mock database lookup). Use decorators or `Tool` wrappers.
"""

from langchain.agents import tool
from typing import Optional

"""## Defining Tools
### 1. Weather Lookup Tool (Mock)
"""

@tool
def get_weather(city: str) -> str:
    """Returns current weather in the given city (mock)."""
    mock_weather_data = {
        "Paris": "Sunny, 25¬∞C",
        "London": "Cloudy, 18¬∞C",
        "New York": "Rainy, 20¬∞C"
    }
    return mock_weather_data.get(city, "Weather data not available.")

"""### 2. Flight Search Tool (Mock)"""

@tool
def search_flights(destination: str, departure: Optional[str] = "Lahore") -> str:
    """Mock flight search from departure to destination."""
    return f"Flight found: {departure} ‚Üí {destination} | Airline: MockAir | Time: 8:00 AM"

"""### 3. Hotel Search Tool (Mock)"""

@tool
def search_hotels(city: str) -> str:
    """Returns a mock list of hotels in the given city."""
    mock_hotels = {
        "Paris": ["Hotel Lumiere", "Eiffel Stay", "Champs Inn"],
        "London": ["The Royal Stay", "Big Ben Hotel"],
        "New York": ["Liberty Suites", "Central Park Lodge"]
    }
    hotels = mock_hotels.get(city, ["No hotels found"])
    return f"Hotels in {city}: {', '.join(hotels)}"

"""## Adding Tools to a List"""

tools = [get_weather, search_flights, search_hotels]

"""##  Step 4: Enable Function-Calling

"""

from langchain_groq import ChatGroq
from langchain.agents import initialize_agent, AgentType

# Initialize the LLM
llm = ChatGroq(temperature=0, model_name="mixtral-8x7b-32768")

# Initialize the Agent with tools
agent = initialize_agent(
    tools=tools,
    llm=llm,
    agent=AgentType.OPENAI_FUNCTIONS,  # enables function-calling
    verbose=True
)

"""##Initializing the LLM

##  Step 5: Integrate LangSmith
 Wrap your LLM or agent with LangSmith to observe performance and execution flows.
"""

from langchain.callbacks import tracing_v2_enabled

user_query = "Plan a trip to Paris from Lahore with weather and hotels"

def fallback_response(query):
    print("üîÅ Fallback triggered.")
    return f"I'm currently unable to fetch real-time data. Here's a general suggestion: visit popular websites for bookings and reviews."


with tracing_v2_enabled(project_name="TravelPlannerAgent"):
    try:
        result = agent.run(user_query)
    except Exception as e:
        result = fallback_response(user_query)

print(result)

"""##  Step 6: Fallback Strategy
 Define a fallback agent or tool to be used when the main tool or agent fails.
"""

def fallback_response(query):
    print("üîÅ Fallback triggered.")
    return f"I'm currently unable to fetch real-time data. Here's a general tip: {llm.predict(query)}"

"""##  (Bonus) Step 7: Define a Workflow using Agentic
 Use the `agentic` library to define a step-by-step flow your agent follows.
"""

!pip install -U agentic --upgrade --force-reinstall

!pip install -U langchain-openai
from langchain_openai import ChatOpenAI

import os
os.environ["OPENAI_API_KEY"] = "key here"

planner_llm = ChatOpenAI(openai_api_key="key here", temperature=0)

!pip install -U langchain-openai

import os
os.environ["OPENAI_API_KEY"] = "sk-..."  # üëà Replace with your key

from langchain_openai import ChatOpenAI
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate

planner_llm = ChatOpenAI(temperature=0)

plan_prompt = PromptTemplate(
    input_variables=["destination", "departure"],
    template="""
You are a travel planning assistant.
User wants a trip from {departure} to {destination}.
Break it into steps: Get weather, search flights, search hotels.
Present each step on a new line.
"""
)

plan_chain = LLMChain(llm=planner_llm, prompt=plan_prompt)

"""##Installing the agentic library"""

!pip install agentic

from agentic import Plan, Step, Executor

# Define your step-by-step plan
class TravelPlan(Plan):
    destination: str
    departure: str = "Lahore"

    @Step()
    def plan_trip(self):
        return plan_chain.run({
            "destination": self.destination,
            "departure": self.departure
        })

    @Step()
    def get_weather(self):
        return get_weather(self.destination)

    @Step()
    def search_flight(self):
        return search_flights(self.destination, self.departure)

    @Step()
    def search_hotels(self):
        return search_hotels(self.destination)

"""# appologies
## stuck on this error
### could'nt figure out on time

Submission Checklist
- [ ] Agent runs end-to-end on your chosen use case
- [ ] At least one custom tool is integrated
- [ ] Function-calling works with tools
- [ ] LangSmith integration logs all calls
- [ ] Fallback logic is demonstrated
- [ ] Bonus: Agentic workflow is defined

##  Grading (100 pts )

##  Tip
You are free to choose **any use case** ‚Äî be creative but keep your design modular and well-commented!
"""